@page "/zones-calculator"
@using TheRainyCoders.Trainer.ZonesCalculators

@inject IStringLocalizer<ZonesCalculator> Localizer

<h3>@Localizer["Headline"]</h3>

<div class="form-group">
    <label for="calculatorList">Calculator:</label>
    <select id="calculatorList" class="form-control" @onchange="OnSelectCalculator">
        <option></option>
        @foreach (var calculator in calculatorFactory.GetAvailableCalculators())
        {
            <option value="@calculator.Id">@calculator.Name</option>
        }
    </select>
</div>

@if (selectedCalculator != null)
{
    @foreach (var inputValueDescription in selectedCalculator.Description.InputValueDescriptions)
    {
        <div class="form-group">
            <label for="@inputValueDescription.Id">@inputValueDescription.Name:</label>
            <input class="form-control" placeholder="@inputValueDescription.Name" id="@inputValueDescription.Id" title="@inputValueDescription.Description" @bind="@calculatorInputValues[inputValueDescription.Id]"/>
        </div>
    }

    <button class="btn btn-primary" @onclick="OnCalculationButtonClick">Calculate</button>
}

@if (calculatorResult != null)
{
    <p />
    <div>
        <table class="table">
            <thead>
            <tr>
                <th>Zone</th>
                <th>Range</th>
            </tr>
            </thead>
            <tbody>
            
            @foreach (var zone in calculatorResult.Zones)
            {
                <tr>
                    <td title="@zone.Description">@zone.Name</td>
                    <td>@zone.Minimum-@zone.Maximum</td>
                </tr>
            }
            </tbody>
        </table>

        <dl class="row">
            @foreach (var zone in calculatorResult.Zones)
            {
                <dt class="col-sm-3" title="@zone.Description">@zone.Name</dt>
                <dd class="col-sm-9">@zone.Minimum-@zone.Maximum</dd>
            }
        </dl>
    </div>
}

@code {
    private IZonesCalculatorFactory calculatorFactory;

    private IZonesCalculator selectedCalculator;

    private Dictionary<Guid, string> calculatorInputValues;

    private ZonesCalculatorResult calculatorResult;

    private void OnSelectCalculator(ChangeEventArgs eventArgs)
    {
        if (Guid.TryParse(eventArgs.Value?.ToString(), out var calculatorId))
        {
            selectedCalculator = calculatorFactory.Create(calculatorId);

            calculatorInputValues.Clear();
            foreach (var zoneCalculatorInputValueDescription in selectedCalculator.Description.InputValueDescriptions)
            {
                calculatorInputValues[zoneCalculatorInputValueDescription.Id] = string.Empty;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        calculatorInputValues = new Dictionary<Guid, string>();
        calculatorFactory = new ZonesCalculatorFactory();

        await Task.CompletedTask;
    }

    private void OnCalculationButtonClick(MouseEventArgs obj)
    {
        var inputValues = new List<ZonesCalculatorInputValue>();

        foreach (var calculatorInputValue in calculatorInputValues)
        {
            var zonesCalculatorInputValue = new ZonesCalculatorInputValue { Id = calculatorInputValue.Key, Value = calculatorInputValue.Value, };
            inputValues.Add(zonesCalculatorInputValue);
        }

        calculatorResult = selectedCalculator.Calculate(inputValues);
    }


}
